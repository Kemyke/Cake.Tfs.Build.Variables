<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Tfs.Build.Variables</name>
    </assembly>
    <members>
        <member name="T:Cake.Tfs.Build.Variables.TfsBuildVariablesAliases">
            <summary>
            Contains functionality for accessing TFS (vnext) build variables.
            </summary>
        </member>
        <member name="T:Cake.Tfs.Build.Variables.TfsBuildVariablesAliases.NamespaceDoc">
            <summary>
            This namespace contain types used for evaluating TFS build variables by name.
            By default TFS expose its variables as environment variables. First they convert the name of the variable
            to be compatible with environment variables names. But TFS doesn't resolve chained variables.
            This library recursively resolve chained variables and substitute all variables found in the value of
            other variables (see tests). 
            Before retreiving environment variable this library try to retrieve an Cake Argument with the variable name.
            This is useful because you can override values by passing it to the Cake script. And it
            is also useful bacuse of the secret variables. TFS doesn't expose secret variables as environment variables.
            You must pass secret variables as argument to the script from the TFS build step.
            If no argument and no environment variable found then a default value is returned if it is provided. If not
            an ArgumentException is thrown.
            </summary>
        </member>
        <member name="M:Cake.Tfs.Build.Variables.TfsBuildVariablesAliases.EvaluateTfsBuildVariable(Cake.Core.ICakeContext,System.String)">
            <summary>
            Evaluate the value of TFS variable. 
            Throws ArgumentException if no variable is found with the given name.
            </summary>
            <example>
            <code>
            var value = EvaluateTfsBuildVariable("Tfs.Example.Variable");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="variableName">The name of the TFS variable</param>
            <returns>Value of the variable.</returns>
        </member>
        <member name="M:Cake.Tfs.Build.Variables.TfsBuildVariablesAliases.EvaluateTfsBuildVariable(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Evaluate the value of TFS variable. 
            If no variable is found with the given name it returns the default value.
            </summary>
            <example>
            <code>
            var value = EvaluateTfsBuildVariable("Tfs.Example.Variable", "defaultValue");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="variableName">The name of the TFS variable</param>
            <param name="defaultValue">The default value of the variable</param>
            <returns>Value of the variable.</returns>
        </member>
    </members>
</doc>
